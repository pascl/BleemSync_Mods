#!/bin/sh
#
#  Copyright 2019 ModMyClassic (https://modmyclassic.com/license)
#
#  This program is free software: you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program.  If not, see <https://www.gnu.org/licenses/>.
#
###############################################################################
# BleemSync Function Library - BleemSync
# ModMyClassic.com / https://discordapp.com/invite/8gygsrw
###############################################################################

###############################################################################
### LOCAL FUNCTIONS ###########################################################
###############################################################################
kill_ui_programs(){
  killall -s TERM sdl_display &> "/dev/null"
  killall -s KILL showLogo sonyapp ui_menu auto_dimmer pcsx &> "/dev/null"
}

launch_retroarch(){
  echo "[BLEEMSYNC](INFO) launching retroarch"
  if [ -f "$bleemsync_path/opt/retroarch/retroarch" ]; then
    # Cleanup 
    cd "/home/root"
    killall -s TERM BleemSync &> "/dev/null"
    kill_ui_programs
    rm -f "/tmp/launchfilecommand"
    rm -f "$runtime_log_path/retroarch.log"
	# Disable Power button
    echo 2 > /data/power/disable
    # Set up RetroArch and launch 
    if [ ! -f "$bleemsync_path/opt/retroarch/system/scph102b.bin" ]; then
      mkdir -p "$bleemsync_path/opt/retroarch/system"
      cp -f "/gaadata/system/bios/romw.bin" "$bleemsync_path/opt/retroarch/system/scph102b.bin"
      echo "[BLEEMSYNC](INFO) copied romw.bin to scph102b.bin for RA PCSX"
    fi
    mkdir -p "/tmp/ra_cache"
    custom_theme_path="$bleemsync_path/opt/retroarch/.config/retroarch/assets/xmb/custom"
    ozone_theme_path="$bleemsync_path/opt/retroarch/.config/retroarch/assets/ozone"
    rm -f "$custom_theme_path/font.tff"
    [ ! -f "$custom_theme_path/font.ttf" ] && cp -f "/usr/sony/share/data/font/SSTJapanese-Regular.ttf" "$custom_theme_path/font.ttf"
    [ ! -f "$ozone_theme_path/regular.ttf" ] && cp -f "/usr/sony/share/data/font/SSTJapanese-Regular.ttf" "$ozone_theme_path/regular.ttf"
    [ ! -f "$ozone_theme_path/bold.ttf" ] && cp -f "/usr/sony/share/data/font/SSTJapanese-Bold.ttf" "$ozone_theme_path/bold.ttf"
    [ ! -f "$custom_theme_path/png/bg.png" ] && cp -f "/usr/sony/share/data/images/GR/JP_US_BG.png" "$custom_theme_path/png/bg.png"
    chmod +x "$bleemsync_path/etc/bleemsync/SUP/scripts/ra_launch.sh"
    export HOME="$retroarch_path"
    # Run RetroArch
    #"$bleemsync_path/etc/bleemsync/SUP/scripts/ra_launch.sh" -v
	if [ "$2" != "--pb" ]; then
		"$bleemsync_path/etc/bleemsync/SUP/scripts/ra_launch.sh" -v
	else
		"$bleemsync_path/etc/bleemsync/SUP/scripts/ra_launch_pb.sh" -v
	fi
    # Post RetroArch run cleanup 
    rm -rf "/tmp/ra_cache"
    export HOME="/home/root" && cd "/home/root"
    sync
    if [ "$1" != "--from_ui" ]; then
      echo launch_BootMenu > "/tmp/launchfilecommand"
    else
      echo launch_StockUI > "/tmp/launchfilecommand"
    fi
  else
    # FAIL catch
    $bleemsync_path/bin/sdl_display "$bleemsync_path/etc/bleemsync/IMG/woah.png" &
    sleep 1
    echo "[BLEEMSYNC](FAIL) tried to launch retroarch and it's not installed! Opening Stock ui..."
    killall -s KILL sdl_display &> "/dev/null"
    echo launch_StockUI > "/tmp/launchfilecommand"
  fi
}

launch_retroarch_standalone(){
  launch_retroarch --from_ui
}

launch_retroarch_directload(){
  launch_retroarch --from_ui --pb
}

launch_launcher_command(){
  echo "[BLEEMSYNC](INFO) launching command from launch.sh"
  if [ -f "/var/volatile/launchtmp/launch.sh" ]; then
    chmod +x "/var/volatile/launchtmp/launch.sh"
    kill_ui_programs
    "/var/volatile/launchtmp/launch.sh"
    echo "[BLEEMSYNC](INFO) launch.sh has exited with $?"
  else
    echo "[BLEEMSYNC](ERROR) launch.sh is missing"
    echo "[BLEEMSYNC](DEBUG) launchtmp path: `readlink -fn /var/volatile/launchtmp/`"
  fi
  #rm -f "/var/volatile/launchtmp"
  if [ ! -f /tmp/launchfilecommand ]; then
    # If no further launchfilecommand has been set then return to StockUI
    echo launch_StockUI > "/tmp/launchfilecommand"
  fi
}

launch_BootMenu(){
  echo "[BLEEMSYNC](INFO) launching BootMenu"
  # Cleanup 
  cd "/home/root"
  kill_ui_programs
  rm -f "/tmp/launchfilecommand"
  rm -fr "$bleemsync_path/opt/bleemsync_ui/temp"
  # Disable Power button
  echo 2 > /data/power/disable
  # Start BleemSync UI app
  if [ $(cat /sys/module/musb_hdrc/parameters/charger_info) -eq "1" ] || [ `cat /sys/class/drm/card0-HDMI-A-1/status` = "disconnected" ]; then
    if [ ! "$(ps | grep -v grep | grep BleemSync)" ]; then
      rm -f "$runtime_log_path/bleemsync_ui.log"
      cd "$bleemsync_path/opt/bleemsync_ui/"
      chmod +x "$bleemsync_ui_app" && $bleemsync_ui_app >> "$runtime_log_path/bleemsync_ui.log" 2>&1 &
    fi
  fi
  # Run BootMenu
  if [ "$boot_menu_music" = "1" ]; then
    $bleemsync_path/bin/boot_menu --image-folder "$images_path" --music-folder "$sounds_path/" --theme-folder "$themes_path/$selected_theme/boot" --default-cfg-file "$bleemsync_path/etc/bleemsync/CFG/bleemsync_cfg_DEFAULT.INI" --cfg-file "$bleemsync_path/etc/bleemsync/CFG/bleemsync_cfg.INI" --ui-themes-folder "$themes_path"
  else
    $bleemsync_path/bin/boot_menu --image-folder "$images_path" --theme-folder "$themes_path/$selected_theme/boot" --default-cfg-file "$bleemsync_path/etc/bleemsync/CFG/bleemsync_cfg_DEFAULT.INI" --cfg-file "$bleemsync_path/etc/bleemsync/CFG/bleemsync_cfg.INI" --ui-themes-folder "$themes_path"
  fi
}

launch_StockUI(){
  echo "[BLEEMSYNC](INFO) launching stock ui"
  # Cleanup
  cd "/home/root"
  killall -s TERM BleemSync &> /dev/null
  kill_ui_programs
  rm -f "/tmp/launchfilecommand"
  # Setup Stock UI with custom
  setup_StockUI
  # Restart Weston to prevent crash due to SONY's shit code.
  if [ -f "/tmp/weston_need_restart.flag" ]; then
    rm -f "/tmp/weston_need_restart.flag"
  fi
  # Remove power file flags
  rm -f "/data/power/prepare_suspend" "/data/power/apps_okay"
  # Fix for last selected game issue. If not in place user may experience ui issue
  sed -i "s/iUiUserSettingLastSelectGameCursorPos=.*/iUiUserSettingLastSelectGameCursorPos=0/" /data/AppData/sony/ui/user.pre
  # Get ready to run Stock UI
  cd "/data/AppData/sony/pcsx"
  export PCSX_ESC_KEY=2
  # Indicate we have done the first boot
  touch "/var/volatile/booted.flag"
  # Run Stock UI
  LD_PRELOAD="$bleemsync_path/lib/sdl_remap_arm.so" /usr/sony/bin/ui_menu --power-off-enable &> "$runtime_log_path/ui_menu.log"
  # Post Stock UI run cleanup
  rm -f "/data/power/prepare_suspend"
  sed -i "s/iUiUserSettingLastSelectGameCursorPos=.*/iUiUserSettingLastSelectGameCursorPos=0/" /data/AppData/sony/ui/user.pre
  umount /usr/sony/bin/pcsx
  umount /gaadata/databases/regional.db
  umount /usr/sony/share/data/preferences/system.pre
  rm -r "${VOL_GAADATA}" "${VOL_DATAPCSX}"
}

###############################################################################
### SUB LOCAL FUNCTIONS #######################################################
###############################################################################
initial_setup() { 
  start=$(date +%s%N)
  sdl_text "Parsing configurations..."
  if [ ! -f "$bleemsync_path/etc/bleemsync/CFG/bleemsync_cfg.INI" ] || [ -f "$bleemsync_path/flags/UPDATE_CONFIG" ]; then
    echo "[BLEEMSYNC](INFO) Injecting default bleemsync config..."
    cat "$bleemsync_path/etc/bleemsync/CFG/bleemsync_cfg_DEFAULT.INI" > "$bleemsync_path/etc/bleemsync/CFG/bleemsync_cfg.INI"
    rm -f "$bleemsync_path/flags/UPDATE_CONFIG"
  fi
  if [ ! -f "$bleemsync_path/etc/bleemsync/CFG/boot_sequence.cfg" ] || [ -f "$bleemsync_path/flags/UPDATE_BOOT" ]; then
    echo "[BLEEMSYNC](INFO) Injecting default boot sequence..."
    cat "$bleemsync_path/etc/bleemsync/CFG/boot_sequence_DEFAULT.cfg" > "$bleemsync_path/etc/bleemsync/CFG/boot_sequence.cfg"
    rm -f "$bleemsync_path/flags/UPDATE_BOOT"
  fi
  if [ ! -f "$bleemsync_path/opt/retroarch/.config/retroarch/retroarch.cfg" ] || [ -f "$bleemsync_path/flags/UPDATE_RA_CONFIG" ]; then
    echo "[BLEEMSYNC](INFO) Injecting default retroarch config..."
    cat "$bleemsync_path/opt/retroarch/.config/retroarch/retroarch_DEFAULT.cfg" > "$bleemsync_path/opt/retroarch/.config/retroarch/retroarch.cfg"
    rm -f "$bleemsync_path/flags/UPDATE_RA_CONFIG"
  fi
  [ ! -f "$bleemsync_path/opt/retroarch/.config/retroarch/retroarch-core-options.cfg" ] && touch "$bleemsync_path/opt/retroarch/.config/retroarch/retroarch-core-options.cfg"
  end=$(date +%s%N)
  echo "[BLEEMSYNC](PROFILE) BleemSync initial set up took: $(((end-start)/1000000))ms to execute" 
}

setup_StockUI() {
  start=$(date +%s%N)

  #Patch out health check if toggled.
  if [ -f "/var/volatile/booted.flag" ] || [ "$boot_disable_health" = "1" ]; then
    PATCH_DIR="/var/volatile/health_patch"
    PATCH_TARGET=/usr/sony/bin/ui_menu
    PATCH_WORKING="${PATCH_DIR}/ui_menu"
    if [ ! -f "$PATCH_WORKING" ]; then
      start=$(date +%s%N)
      echo "[BLEEMSYNC](INFO) attempting to patch out H+S statement"
      # Perform patching
      mkdir -p "${PATCH_DIR}"
      cp "${PATCH_TARGET}" "${PATCH_WORKING}"
      echo -ne '\xb8\x0c\x00' | dd bs=1 of="${PATCH_WORKING}" seek=28084 conv=notrunc
      echo -ne '\x06\x03' | dd bs=1 of="${PATCH_WORKING}" seek=28120 conv=notrunc
      echo -ne '\x58\xbe' | dd bs=1 of="${PATCH_WORKING}" seek=28712 conv=notrunc
      mount -o bind "${PATCH_WORKING}" "${PATCH_TARGET}"
      if [ "$?" -eq "0" ]; then
        echo "[BLEEMSYNC](INFO) patched out H+S statement"
      else
        echo "[BLEEMSYNC](FAIL) failed to patch out H+S statement, continuing anyway..."
      fi
      end=$(date +%s%N)
      echo "[BLEEMSYNC](PROFILE) BleemSync H+S patching took: $(((end-start)/1000000))ms to execute"
    fi
  fi
  
  # Unmount partitons and create tmpfs - Shut system down on failure
  MOUNT_FAIL=0
  # Create gaadata and data folders in tmp then mount over original folders
  export VOL_GAADATA="/var/volatile/gaadatatmp"
  export VOL_DATAPCSX="/var/volatile/datatmp"
  mkdir -p "${VOL_GAADATA}" "${VOL_DATAPCSX}"
  mount -o bind "$bleemsync_path/etc/bleemsync/SUP/binaries/pcsx" "/usr/sony/bin/pcsx" || MOUNT_FAIL=1

  if [ "$MOUNT_FAIL" = "1" ]; then
    # FAIL catch
    echo 0 > /sys/class/leds/green/brightness
    echo 1 > /sys/class/leds/red/brightness
    $bleemsync_path/bin/sdl_display "$bleemsync_path/etc/bleemsync/IMG/woah.png" &
    sleep 1
    sync
    reboot
    exit 1
  fi

  end=$(date +%s%N)
  echo "[BLEEMSYNC](PROFILE) BleemSync tmpfs mounting took: $(((end-start)/1000000))ms to execute"
#-----------------------------------------------------------------------------#
  start=$(date +%s%N)

  # Create gaadata on tmpfs
  mkdir -p "${VOL_GAADATA}/databases/"
  cp -f "$bleemsync_path/etc/bleemsync/SYS/databases/regional.db" "${VOL_GAADATA}/databases/"

  ln -s /gaadata/geninfo "${VOL_GAADATA}"
  ln -s /gaadata/preferences "${VOL_GAADATA}"
  ln -s /gaadata/system "${VOL_GAADATA}"

  # Create data on tmpfs
  ln -s /gaadata/system/bios "${VOL_DATAPCSX}"
  ln -s /usr/sony/bin/plugins "${VOL_DATAPCSX}"

  # Link games on /mountpoint
  if [ -d "$mountpoint/games" ]; then
    media_game_ids=(`"$bleemsync_path/bin/sqlite3" "$bleemsync_path/etc/bleemsync/SYS/databases/regional.db" -cmd "SELECT GAME_ID FROM MENU_ENTRIES" ".quit"`)
    for game in "${media_game_ids[@]}"; do
      ln -s "${mountpoint}/games/${game}/" "${VOL_GAADATA}"
      ln -s "${mountpoint}/games/${game}/" "${VOL_DATAPCSX}"
      # Ensure .pcsx/pcsx.cfg is present
      mkdir -p "${mountpoint}/games/${game}/.pcsx"
      [ ! -f "${mountpoint}/games/${game}/.pcsx/pcsx.cfg" ] && cp "$bleemsync_path/etc/bleemsync/SYS/defaults/pcsx.cfg" "${mountpoint}/games/${game}/.pcsx/pcsx.cfg"
    done

    if [[ `find "${mountpoint}/games/"* -maxdepth 0 -type d | wc -l` -ne ${#media_game_ids[@]} ]]; then
      echo "[BLEEMSYNC](WARN) You have folders in ${mountpoint}/games/ that are not in the BleemSync database." 
      echo "[BLEEMSYNC](WARN) Do not manually add or remove games in this folder. Remove any manually created folders and add them via the BleemSync web interface."
    fi
  fi
  # Force intercept to allow launching custom scripts from stock UI
  mount -o bind "$bleemsync_path/etc/bleemsync/CFG/system.pre" "/usr/sony/share/data/preferences/system.pre"
  cp "$bleemsync_path/etc/bleemsync/SUP/scripts/intercept" "/tmp/intercept"
  chmod +x "/tmp/intercept"

  end=$(date +%s%N)
  echo "[BLEEMSYNC](PROFILE) BleemSync tmpfs sym linking and processing took: $(((end-start)/1000000))ms to execute"
#-----------------------------------------------------------------------------#
  # Unite EMMC and MEDIA games and databases
  if [ "$link_EMMC_and_USB" = "1" ]; then
    start=$(date +%s%N)

    emmc_gaadata_count=`"$bleemsync_path/bin/sqlite3" "/gaadata/databases/regional.db" -cmd "SELECT GAME_ID FROM GAME ORDER BY GAME_ID DESC LIMIT 1" ".quit"`
    media_gaadata_count=`"$bleemsync_path/bin/sqlite3" "${VOL_GAADATA}/databases/regional.db" -cmd "SELECT GAME_ID FROM MENU_ENTRIES ORDER BY GAME_ID DESC LIMIT 1" ".quit"`
    [ -z "$media_gaadata_count" ] && media_gaadata_count=0
    echo "[BLEEMSYNC](INFO) EMMC Count $emmc_gaadata_count Media Count $media_gaadata_count"

    # Merge databases
    echo "BEGIN TRANSACTION;" > "/tmp/join.sql"
    "$bleemsync_path/bin/sqlite3" "/gaadata/databases/regional.db" -cmd ".output /tmp/emmc_games.sql" \
      ".mode insert MENU_ENTRIES" "select GAME_ID + $media_gaadata_count, GAME_TITLE_STRING, PUBLISHER_NAME, RELEASE_YEAR, PLAYERS, RATING_IMAGE, GAME_MANUAL_QR_IMAGE, case when LINK_GAME_ID = '' then LINK_GAME_ID else LINK_GAME_ID + $media_gaadata_count end, 9999 from GAME;" \
      ".mode insert DISC" "select null, GAME_ID + $media_gaadata_count, DISC_NUMBER, BASENAME from DISC;" ".quit"

    cat "/tmp/emmc_games.sql" >> "/tmp/join.sql"
    echo "COMMIT;" >> "/tmp/join.sql"
    "$bleemsync_path/bin/sqlite3" "${VOL_GAADATA}/databases/regional.db" -cmd ".read /tmp/join.sql" ".quit"
    
    # Link directories
    for i in $(seq 1 $emmc_gaadata_count); do
      if [ -d "/gaadata/$i" -a -d "/data/AppData/sony/pcsx/$i" ]; then
        new_id=$(( media_gaadata_count + i ))   
        ln -s "/gaadata/$i/" "${VOL_GAADATA}/$new_id"
        ln -s "/data/AppData/sony/pcsx/$i/" "${VOL_DATAPCSX}/$new_id"
      fi
    done 

    if [ "$link_alphabeticalise" = "1" ]; then
      "$bleemsync_path/bin/sqlite3" "${VOL_GAADATA}/databases/regional.db" -cmd "UPDATE MENU_ENTRIES SET POSITION=0" ".quit"
    fi
    end=$(date +%s%N)
    echo "[BLEEMSYNC](PROFILE) BleemSync EMMC + USB dyna link took: $(((end-start)/1000000))ms to execute"
  fi
#-----------------------------------------------------------------------------#
  # If enabled, load any additional additional launchers into the ui_menu database
  if [ "$ui_app_launchers" = "1" ]; then
    start_launcher=$(date +%s%N)
    echo "[BLEEMSYNC](INFO) loading additional application launchers"
    total_count=`"$bleemsync_path/bin/sqlite3" "${VOL_GAADATA}/databases/regional.db" -cmd "SELECT GAME_ID FROM MENU_ENTRIES ORDER BY GAME_ID DESC LIMIT 1" ".quit"`
    [ -z "$total_count" ] && total_count=0
    last_position=`"$bleemsync_path/bin/sqlite3" "${VOL_GAADATA}/databases/regional.db" -cmd "SELECT case when POSITION is null then 1 else POSITION + 1 end FROM MENU_ENTRIES ORDER BY POSITION DESC LIMIT 1" ".quit"`
    [ -z "$last_position" ] && last_position=1
    echo "BEGIN TRANSACTION;" > "/tmp/launcher.sql"
    for launcher in "$bleemsync_path/etc/bleemsync/SUP/launchers/"*; do
      if [ -d "$launcher" ]; then
        if [ -f "$launcher/launcher.cfg" ]; then
          source "$bleemsync_path/etc/bleemsync/SUP/scripts/launcher_reset.cfg"
          source "$launcher/launcher.cfg"
          if [[ -z $launcher_filename || -z $launcher_title ]]; then
            echo "[BLEEMSYNC](ERROR) launcher.cfg for $launcher is missing required variables launcher_filename and/or launcher_title"
          else
            # Only permit A-Z,1-9 to prevent characters which may break SQL insert
            launcher_filename=`echo $launcher_filename | sed -e "s/[^ A-Za-z0-9]//g"`
            launcher_title=`echo $launcher_title | sed -e "s/[^ A-Za-z0-9]//g"`
            launcher_publisher=`echo $launcher_publisher | sed -e "s/[^ A-Za-z0-9]//g"`
            launcher_year=`echo $launcher_year | sed -e "s/[^ A-Za-z0-9]//g"`
            if [ "$launcher_sort" = "no" ]; then
              launcher_sort="$last_position"
            else
              launcher_sort="0"
            fi
            let total_count++
            echo "INSERT INTO DISC VALUES(NULL,$total_count,1,'$launcher_filename');" >> "/tmp/launcher.sql"
            echo "INSERT INTO MENU_ENTRIES VALUES($total_count,'$launcher_title','$launcher_publisher',$launcher_year,1,'CERO_A','QR_CODE_GM',NULL,$launcher_sort);" >> "/tmp/launcher.sql"
            ln -s "$launcher" "${VOL_GAADATA}/$total_count"
            ln -s "$launcher" "${VOL_DATAPCSX}/$total_count"
            echo "[BLEEMSYNC](INFO) launcher loaded: $launcher"
          fi
        fi
      fi
    done
    echo "COMMIT;" >> "/tmp/launcher.sql"
    "$bleemsync_path/bin/sqlite3" "${VOL_GAADATA}/databases/regional.db" -cmd ".read /tmp/launcher.sql" ".quit"
    end_launcher=$(date +%s%N)
    echo "[BLEEMSYNC](PROFILE) loading additional application launchers took: $(((end_launcher-start_launcher)/1000000))ms to execute"
  fi
#-----------------------------------------------------------------------------#
  # Clean up temp
  rm -rf "/tmp/"*".sql" "/tmp/"*".csv"
  # Overmount the stock DB
  mount -o bind "${VOL_GAADATA}/databases/regional.db" /gaadata/databases/regional.db
#-----------------------------------------------------------------------------#
}

###############################################################################
### MAIN BLEEMSYNC FUNCTION ###################################################
###############################################################################
execute_bleemsync_func(){
  echo "[BLEEMSYNC](Executing) execute_bleemsync_func()"
  sdl_text "Loading BleemSync..."
  echo 1 > /sys/class/leds/red/brightness
#-----------------------------------------------------------------------------#
  old_system_dir="$mountpoint/system"
  [ -d "$mountpoint/System" ] && old_system_dir="$mountpoint/System"
  if [ -d "$old_system_dir" ]; then
    echo "[BLEEMSYNC](<1.0) Migrating System folder"
    sdl_text "Migrating old BleemSync deployment..."
    start=$(date +%s%N)
    mkdir -p "$bleemsync_path/etc/bleemsync/SYS"
    cp -rf "$old_system_dir/"* "$bleemsync_path/etc/bleemsync/SYS/"
    rm -r "$old_system_dir"
    if [ -f "$bleemsync_path/etc/bleemsync/SYS/databases/regional.db" ]; then
      "$bleemsync_path/bin/sqlite3" "$bleemsync_path/etc/bleemsync/SYS/databases/regional.db" < \
        "$bleemsync_path/etc/bleemsync/SUP/scripts/migrate_pre10_db.sql"
    fi
    end=$(date +%s%N)
    echo "[BLEEMSYNC](<1.0) Migration complete: $(((end-start)/1000000))ms to execute"
  fi
#-----------------------------------------------------------------------------#
  start=$(date +%s%N)
  # Copy over default files if not exist
  mkdir -p "$bleemsync_path/etc/bleemsync/SYS/defaults"
  [ ! -f "$bleemsync_path/etc/bleemsync/SYS/defaults/pcsx.cfg" ] && \
    cp /gaadata/1/pcsx.cfg "$bleemsync_path/etc/bleemsync/SYS/defaults"
  [ ! -f "$bleemsync_path/etc/bleemsync/CFG/system.pre" ] && \
    cp "$bleemsync_path/etc/bleemsync/SUP/scripts/system.pre" "$bleemsync_path/etc/bleemsync/CFG"
  
  # Check if this is a new install
  if [ ! -f "$bleemsync_path/etc/bleemsync/SYS/databases/regional.db" ]; then
    echo "[BLEEMSYNC](INFO) $bleemsync_path/etc/bleemsync/SYS/databases/regional.db does NOT EXIST"
    echo "[BLEEMSYNC](INFO) This may be a new install. Creating databases folder"
    mkdir -p "$bleemsync_path/etc/bleemsync/SYS/databases"
  fi

  #Initalise config or update if required
  initial_setup
    
  # Migrate GameData contents and copy default pcsx.cfg if not present
  for game in "${mountpoint}/games/"*/; do
    if [ -d "${game}GameData" ]; then
      mv "${game}GameData/"* "${game}"
      cp -rf "${game}GameData/".[!.]* "${game}"
      rm -r "${game}GameData"
      rm -f "${game}pcsx.cfg"
    fi
  done

  end=$(date +%s%N)
  echo "[BLEEMSYNC](PROFILE) BleemSync general fixing took: $(((end-start)/1000000))ms to execute"
#-----------------------------------------------------------------------------#
  start=$(date +%s%N)
  chmod +x "$bleemsync_path/opt/psc_transfer_tools/on_console_transfer.sh"
  "$bleemsync_path/opt/psc_transfer_tools/on_console_transfer.sh"
  end=$(date +%s%N)
  echo "[BLEEMSYNC](PROFILE) Transfer tool execution took: $(((end-start)/1000000))ms to execute"
#-----------------------------------------------------------------------------#
  # RetroArch - create playlist for USB games
  if [ "$generate_external_game_playlist" = "1" ]; then
    start=$(date +%s%N)
    
    mkdir -p "$retroarch_path/.config/retroarch/playlists" "$retroarch_path/.config/retroarch/thumbnails/PlayStation Classic - External"
    "$bleemsync_path/bin/lpl_generator" "$bleemsync_path/etc/bleemsync/SYS/databases/regional.db" "$retroarch_path/.config/retroarch/playlists/PlayStation Classic - External.lpl" "$mountpoint/games" "/tmp/ra_playlist_thumbnails"
    mount -o bind "/tmp/ra_playlist_thumbnails" "$retroarch_path/.config/retroarch/thumbnails/PlayStation Classic - External"
    
    end=$(date +%s%N)
    echo "[BLEEMSYNC](PROFILE) RA External Playlist Generation execution took: $(((end-start)/1000000))ms to execute"
  fi
  
  # RetroArch - copy appropriate playlist for stock games
  # TODO - this should be dynamically generated when we support replacing games on the internal
  if [ "$generate_internal_game_playlist" = "1" ]; then
    start=$(date +%s%N)
    
    mkdir -p "$retroarch_path/.config/retroarch/playlists"
    if [ `cat /gaadata/geninfo/REGION` = "J" ]; then
      cp -f "$bleemsync_path/etc/bleemsync/SUP/retroarch/psc_jpn.lpl" "$retroarch_path/.config/retroarch/playlists/PlayStation Classic - Internal.lpl"
    else
      cp -f "$bleemsync_path/etc/bleemsync/SUP/retroarch/psc_row.lpl" "$retroarch_path/.config/retroarch/playlists/PlayStation Classic - Internal.lpl"
    fi
    
    end=$(date +%s%N)
    echo "[BLEEMSYNC](PROFILE) RA Internal Playlist Generation execution took: $(((end-start)/1000000))ms to execute"
  fi
  
  sdl_text "Loading BleemSync..."
#-----------------------------------------------------------------------------#
  # Load additional modules
  for mod in "$bleemsync_path/etc/bleemsync/SUP/modules/"*.ko; do insmod "$mod"; done
#-----------------------------------------------------------------------------#
  start=$(date +%s%N)

  boot_command="launch_StockUI"
  [ "$boot_target_stock_BM" = "1" ] && boot_command="launch_BootMenu"
  [ "$boot_target_stock_RA" = "1" ] && boot_command="launch_retroarch"

  # HDMI connection check, if not connected force BootMenu so BleemSync UI runs
  # so that if the user has set boot directly to Stock UI or RA, then there is a way
  # to force BleemSync to run without having to resort to editing config files
  if [ `cat /sys/class/drm/card0-HDMI-A-1/status` = "disconnected" ]; then
    boot_command="launch_BootMenu"
  fi

  # Prep BleemSync UI launch
  bleemsync_ui_app="$bleemsync_path/opt/bleemsync_ui/BleemSync"
  rm -f "$runtime_log_path/bleemsync_ui.log"
  rm -f "$bleemsync_path/opt/bleemsync_ui/temp/"*

  # Only launch BleemSync UI if data lines are connected or HDMI is not connected
  if [ $(cat /sys/module/musb_hdrc/parameters/charger_info) -eq "1" ] || [ `cat /sys/class/drm/card0-HDMI-A-1/status` = "disconnected" ]; then
    # Skip launching BleemSync UI if a database exists, and the user is booting directly to RA or Stock UI
    if [ ! "$boot_command" = "launch_BootMenu" ] && [ -f "$bleemsync_path/etc/bleemsync/SYS/databases/regional.db" ]; then
      echo "[BLEEMSYNC](INFO) Skip startup of BleemSync UI as booting directly to $boot_command"
    else
      #This needs some serious cleaning in future revisions...
      echo "[BLEEMSYNC](INFO) Starting BleemSync UI"
      cd "$bleemsync_path/opt/bleemsync_ui/"
      chmod +x "$bleemsync_ui_app" && $bleemsync_ui_app >> "$runtime_log_path/bleemsync_ui.log" 2>&1 &
      #urgh
      sleep 4
    fi

    if [ ! -f "$bleemsync_path/etc/bleemsync/SYS/databases/regional.db" ]; then
      echo "[BLEEMSYNC](INFO) UI database does not exist. Waiting for automatic creation during UI startup"
      sdl_text "UI database doesn't exist. Creating DB..."
      SECONDS=0
      db_timeout=45
      while [ ! -f "$bleemsync_path/etc/bleemsync/SYS/databases/regional.db" ]
      do
        sleep 1s
        [ $SECONDS -gt $db_timeout ] && break
      done
      [ -f "$bleemsync_path/etc/bleemsync/SYS/databases/regional.db" ] && echo "[BLEEMSYNC](INFO) database generated in $SECONDS seconds."
    fi
  fi

  # Check for regional database
  if [ ! -f "$bleemsync_path/etc/bleemsync/SYS/databases/regional.db" ]; then
    echo "[BLEEMSYNC](ERROR) regional database has not been created."
    #display error message
    sdl_text "Could not create regional database."
    sleep 2
    echo 0 > /sys/class/leds/green/brightness
    echo 1 > /sys/class/leds/red/brightness
    $bleemsync_path/bin/sdl_display "$bleemsync_path/etc/bleemsync/IMG/woah.png" &
    sleep 1
    sync
    reboot
    exit 1
  fi

  end=$(date +%s%N)
  echo "[BLEEMSYNC](PROFILE) BleemSync UI startup took: $(((end-start)/1000000))ms to execute"
#-----------------------------------------------------------------------------#
  # Reload and apply udev rules that were overmounted above
  # Allows both controllers to be detected through a USB hub
  sdl_text "Mounting files..."
  mount -o bind "$bleemsync_path/etc/bleemsync/SUP/scripts/20-joystick.rules" "/etc/udev/rules.d/20-joystick.rules"
  udevadm control --reload-rules
  udevadm trigger

  # Mount replacement copyright script
  chmod +x "$bleemsync_path/etc/bleemsync/SUP/scripts/credits"
  mount -o bind "$bleemsync_path/etc/bleemsync/SUP/scripts/credits" /usr/sony/bin/showCopyright.sh
#-----------------------------------------------------------------------------#
  # Select UI theme whilst load screen available (Profiler built in)
  sdl_text "Setting up themes..."
  select_UI_theme
#-----------------------------------------------------------------------------#
  echo 0 > /sys/class/leds/red/brightness
  echo "[BLEEMSYNC](INFO) completed bleemsync boot"
  sdl_text "Starting up..."
#-----------------------------------------------------------------------------#
  start=$(date +%s%N)
  # Cleanup before starting main user applications
  rm -rf "/tmp/systemd"*
  rm -rf "/tmp/diag/"*

  killall -s TERM sdl_display &> /dev/null

  end=$(date +%s%N)
  echo "[BLEEMSYNC](PROFILE) BleemSync pre run cleanup took: $(((end-start)/1000000))ms to execute"
#-----------------------------------------------------------------------------#
  while [ $boot_command != "quit" ]; do
    if [ $boot_command = "launch_StockUI" ]; then
      # Restart Weston before launching Stock UI to prevent process hang
      start_weston=$(date +%s%N)
      systemctl restart weston
      wait_sdl
      end_weston=$(date +%s%N)
      echo "[BLEEMSYNC](PROFILE) Weston restart took: $(((end_weston-start_weston)/1000000))ms to execute"
    fi
    $boot_command
    [ -f /tmp/launchfilecommand ] && boot_command=$(cat /tmp/launchfilecommand) || boot_command="quit"
    rm -f /tmp/launchfilecommand
  done

  # Debug cleanup
  umount /etc/udev/rules.d/20-joystick.rules
  if [ "$boot_disable_health" = "1" ]; then umount /usr/sony/bin/ui_menu; fi
  [ "$generate_external_game_playlist" = "1" ] && umount "$retroarch_path/.config/retroarch/thumbnails/PlayStation Classic - External"
#-----------------------------------------------------------------------------#
  sync
  echo "[BLEEMSYNC](Executed) execute_bleemsync_func()"
  killall -s TERM BleemSync &> "/dev/null"
  kill_ui_programs
  reboot
  exit 0
}
###############################################################################
###############################################################################
###############################################################################